"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Upload, X, ImageIcon } from "lucide-react"
import { useAuthStore } from "@/stores/authStore"

interface EvidenceUploadBoxProps {
  orderId: string
  currentUserId: string
  userRole: "buyer" | "seller"
  orderStatus?: string
}

export function EvidenceUploadBox({ 
  orderId, 
  currentUserId, 
  userRole, 
  orderStatus = "in_trade"
}: EvidenceUploadBoxProps) {
  const [file, setFile] = useState<File | null>(null)
  const [preview, setPreview] = useState<string | null>(null)
  const [uploading, setUploading] = useState(false)
  const [evidences, setEvidences] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  
  // Get token from auth store
  const token = useAuthStore((s) => s.token)

  // ‡πÇ‡∏´‡∏•‡∏î evidence ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  useEffect(() => {
    const loadEvidences = async () => {
      if (!orderId || !token) return
      
      try {
        const response = await fetch(
          `/api/v1/evidence/order/${orderId}`,
          {
            method: "GET",
            headers: {
              "Authorization": `Bearer ${token}`,
            },
          }
        )

        if (response.ok) {
          const json = await response.json()
          setEvidences(json.data || [])
        }
      } catch (error) {
        console.error("Failed to load evidences:", error)
      } finally {
        setLoading(false)
      }
    }

    loadEvidences()
  }, [orderId, token])

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ upload ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const myEvidence = evidences.find(e => e.byUserId === currentUserId)
  const hasUploaded = !!myEvidence

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ order ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô in_trade, await_confirm ‡∏´‡∏£‡∏∑‡∏≠ disputed
  const canUpload = (orderStatus === "in_trade" || orderStatus === "await_confirm" || orderStatus === "disputed") && !hasUploaded

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const f = e.target.files?.[0]
    if (!f) return

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
    const validTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp"]
    if (!validTypes.includes(f.type)) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (JPG, PNG, GIF, WebP)")
      return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (10MB)
    if (f.size > 10 * 1024 * 1024) {
      alert("‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10MB")
      return
    }

    setFile(f)
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview
    const reader = new FileReader()
    reader.onload = (event) => {
      setPreview(event.target?.result as string)
    }
    reader.readAsDataURL(f)
  }

  const handleRemove = () => {
    setFile(null)
    setPreview(null)
  }

  const handleSubmit = async () => {
    if (!file || !token) return

    setUploading(true)
    try {
      // 1. ‡∏Ç‡∏≠ presigned URL
      const uploadUrlResponse = await fetch(
        `/api/v1/upload/r2/upload-url`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`,
          },
          body: JSON.stringify({
            contentType: file.type,
            fileName: file.name,
          }),
        }
      )

      if (!uploadUrlResponse.ok) {
        throw new Error("Failed to get upload URL")
      }

      const responseData = await uploadUrlResponse.json()
      const uploadUrl = responseData.data?.uploadUrl
      const publicUrl = responseData.data?.imageUrl

      // 2. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà R2
      const uploadResponse = await fetch(uploadUrl, {
        method: "PUT",
        headers: {
          "Content-Type": file.type,
        },
        body: file,
      })

      if (!uploadResponse.ok) {
        throw new Error("Failed to upload file to R2")
      }

      // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å evidence record
      const evidenceResponse = await fetch(`/api/v1/evidence`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`,
        },
        body: JSON.stringify({
          orderId,
          url: publicUrl,
          isVideo: false,
          note: null,
        }),
      })

      if (!evidenceResponse.ok) {
        const errorData = await evidenceResponse.json()
        throw new Error(errorData.error || "Failed to save evidence")
      }

      const result = await evidenceResponse.json()

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
      alert("‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö\nüìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

      // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
      window.location.reload()
    } catch (error: any) {
      console.error("Upload error:", error)
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message)
    } finally {
      setUploading(false)
    }
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á component
  if (orderStatus !== "in_trade" && orderStatus !== "await_confirm" && orderStatus !== "disputed") {
    return null
  }

  // ‡πÅ‡∏™‡∏î‡∏á loading
  if (loading) {
    return (
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="text-card-foreground">Evidence</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
        </CardContent>
      </Card>
    )
  }

  // ‡∏ñ‡πâ‡∏≤ upload ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà upload ‡πÑ‡∏ß‡πâ
  if (hasUploaded) {
    return (
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="text-card-foreground">Your Evidence</CardTitle>
          <p className="text-sm text-muted-foreground">
            ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
          </p>
        </CardHeader>
        <CardContent>
          <div className="relative aspect-video rounded-lg overflow-hidden bg-muted">
            <img
              src={myEvidence.url}
              alt="Evidence"
              className="w-full h-full object-contain"
            />
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(myEvidence.createdAt).toLocaleString("th-TH")}
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="bg-card border-border">
      <CardHeader>
        <CardTitle className="text-card-foreground">Upload Evidence</CardTitle>
        <p className="text-sm text-muted-foreground">
          {orderStatus === "disputed" 
            ? "‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏û‡∏¥‡∏û‡∏≤‡∏ó - ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            : "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô (JPG, PNG, GIF, WebP ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10MB)"}
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Upload Area */}
        {!preview ? (
          <div className="border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-accent/50 hover:bg-accent/5 transition-colors">
            <label
              htmlFor="evidence-upload"
              className="cursor-pointer flex flex-col items-center"
            >
              <Upload className="h-12 w-12 text-muted-foreground mb-4" />
              <p className="text-card-foreground font-medium mb-1">
                ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              </p>
              <p className="text-sm text-muted-foreground">
                ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10MB)
              </p>
              <input
                id="evidence-upload"
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
              />
            </label>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Preview */}
            <div className="relative aspect-video rounded-lg overflow-hidden bg-muted border border-border">
              <img
                src={preview}
                alt="Preview"
                className="w-full h-full object-contain"
              />
              <button
                onClick={handleRemove}
                className="absolute top-2 right-2 bg-red-500 hover:bg-red-600 text-white rounded-full p-2"
              >
                <X className="h-4 w-4" />
              </button>
            </div>

            {/* File Info */}
            {file && (
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <ImageIcon className="h-4 w-4" />
                <span className="truncate">{file.name}</span>
                <span className="ml-auto">
                  {(file.size / (1024 * 1024)).toFixed(2)} MB
                </span>
              </div>
            )}

            {/* Submit Button */}
            <Button
              onClick={handleSubmit}
              disabled={uploading}
              className="w-full bg-accent hover:bg-accent/90"
            >
              {uploading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î..." : "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô"}
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
