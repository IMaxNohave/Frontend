generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // BetterAuth required fields
  accounts Account[]
  sessions Session[]
  
  // Custom fields for trading platform
  balance       Float     @default(0)
  socialCredit  Int       @default(100)
  role          String    @default("user") // user, admin
  robloxId      String?
  
  // Trading relationships
  buyOrders     Order[]   @relation("BuyOrders")
  sellOrders    Order[]   @relation("SellOrders")
  chatMessages  ChatMessage[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Order {
  id          String   @id @default(cuid())
  itemName    String
  itemImage   String?
  price       Float
  status      String   @default("pending") // pending, confirmed, completed, disputed, cancelled
  category    String
  description String?
  
  buyerId     String
  sellerId    String
  buyer       User     @relation("BuyOrders", fields: [buyerId], references: [id])
  seller      User     @relation("SellOrders", fields: [sellerId], references: [id])
  
  chatMessages ChatMessage[]
  evidences    Evidence[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("orders")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  orderId   String
  userId    String
  
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@map("chat_messages")
}

model Evidence {
  id        String   @id @default(cuid())
  imageUrl  String
  orderId   String
  uploadedBy String
  
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("evidences")
}
